diff --git a/src/pd/mod.rs b/src/pd/mod.rs
index 1bcce54623..2503f2e6ff 100644
--- a/src/pd/mod.rs
+++ b/src/pd/mod.rs
@@ -22,6 +22,7 @@ pub use self::errors::{Error, Result};
 pub use self::client::RpcClient;
 pub use self::util::validate_endpoints;
 pub use self::pd::{Runner as PdRunner, Task as PdTask};
+pub use self::util::RECONNECT_INTERVAL_SEC;
 
 use kvproto::metapb;
 use kvproto::pdpb;
diff --git a/src/pd/util.rs b/src/pd/util.rs
index a4c50c073c..7be229ee01 100644
--- a/src/pd/util.rs
+++ b/src/pd/util.rs
@@ -180,7 +180,7 @@ impl LeaderClient {
     }
 }
 
-const RECONNECT_INTERVAL_SEC: u64 = 1; // 1s
+pub const RECONNECT_INTERVAL_SEC: u64 = 1; // 1s
 
 /// The context of sending requets.
 pub struct Request<Req, Resp, F> {
@@ -285,7 +285,9 @@ where
     F: Fn(&PdClient) -> GrpcResult<R>,
 {
     for _ in 0..retry {
-        match func(&client.inner.rl().client).map_err(Error::Grpc) {
+        // DO NOT put any lock operation in match statement, or it will cause dead lock!
+        let ret = { func(&client.inner.rl().client).map_err(Error::Grpc) };
+        match ret {
             Ok(r) => {
                 return Ok(r);
             }
diff --git a/tests/pd/mock/mocker/retry.rs b/tests/pd/mock/mocker/retry.rs
index 69944a8415..6c5753f179 100644
--- a/tests/pd/mock/mocker/retry.rs
+++ b/tests/pd/mock/mocker/retry.rs
@@ -11,9 +11,12 @@
 // See the License for the specific language governing permissions and
 // limitations under the License.
 
+use std::thread;
+use std::time::Duration;
 use std::sync::atomic::{AtomicUsize, Ordering};
 
 use kvproto::pdpb::*;
+use tikv::pd::RECONNECT_INTERVAL_SEC;
 
 use super::*;
 
@@ -32,16 +35,36 @@ impl Retry {
             count: AtomicUsize::new(0),
         }
     }
+
+    fn is_ok(&self) -> bool {
+        let count = self.count.fetch_add(1, Ordering::SeqCst);
+        if count != 0 && count % self.retry == 0 {
+            // it's ok.
+            return true;
+        }
+        // let's sleep awhile, so that client will update its connection.
+        thread::sleep(Duration::from_secs(RECONNECT_INTERVAL_SEC));
+        false
+    }
 }
 
 impl PdMocker for Retry {
     fn get_region_by_id(&self, _: &GetRegionByIDRequest) -> Option<Result<GetRegionResponse>> {
-        let count = self.count.fetch_add(1, Ordering::SeqCst);
-        if count != 0 && count % self.retry == 0 {
-            info!("[Retry] return Ok(_)");
+        if self.is_ok() {
+            info!("[Retry] get_region_by_id returns Ok(_)");
             Some(Ok(GetRegionResponse::new()))
         } else {
-            info!("[Retry] return Err(_)");
+            info!("[Retry] get_region_by_id returns Err(_)");
+            Some(Err("please retry".to_owned()))
+        }
+    }
+
+    fn get_store(&self, _: &GetStoreRequest) -> Option<Result<GetStoreResponse>> {
+        if self.is_ok() {
+            info!("[Retry] get_store returns Ok(_)");
+            Some(Ok(GetStoreResponse::new()))
+        } else {
+            info!("[Retry] get_store returns Err(_)");
             Some(Err("please retry".to_owned()))
         }
     }
diff --git a/tests/pd/test_rpc_client.rs b/tests/pd/test_rpc_client.rs
index c2189c99ac..09ccc1b746 100644
--- a/tests/pd/test_rpc_client.rs
+++ b/tests/pd/test_rpc_client.rs
@@ -153,8 +153,7 @@ fn test_validate_endpoints() {
     assert!(validate_endpoints(env, &eps).is_err());
 }
 
-#[test]
-fn test_retry_async() {
+fn test_retry<F: Fn(&RpcClient)>(func: F) {
     let eps_count = 1;
     let se = Arc::new(Service::new());
     // Retry mocker returns `Err(_)` for most request, here two thirds are `Err(_)`.
@@ -170,10 +169,24 @@ fn test_retry_async() {
 
     let client = RpcClient::new(&eps).unwrap();
 
-    for _ in 0..5 {
+    for _ in 0..3 {
+        func(&client);
+    }
+}
+
+#[test]
+fn test_retry_async() {
+    let async = |client: &RpcClient| {
         let region = client.get_region_by_id(1);
         region.wait().unwrap();
-    }
+    };
+    test_retry(async);
+}
+
+#[test]
+fn test_retry_sync() {
+    let sync = |client: &RpcClient| { client.get_store(1).unwrap(); };
+    test_retry(sync)
 }
 
 #[test]
