diff --git a/src/lib.rs b/src/lib.rs
index 0e76c4cc3e..187a11302e 100644
--- a/src/lib.rs
+++ b/src/lib.rs
@@ -14,7 +14,6 @@
 #![crate_type = "lib"]
 #![allow(unused_features)]
 #![feature(test)]
-#![feature(arc_counts)]
 #![feature(optin_builtin_traits)]
 #![feature(btree_range, collections_bound)]
 #![feature(recover)]
diff --git a/src/util/event.rs b/src/util/event.rs
index 6308c45dc0..eff498202f 100644
--- a/src/util/event.rs
+++ b/src/util/event.rs
@@ -1,19 +1,60 @@
+// Copyright 2016 PingCAP, Inc.
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//     http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+
 use std::sync::{Arc, Mutex, Condvar};
+use std::sync::atomic::{AtomicUsize, Ordering};
 use std::time::{Duration, Instant};
+use std::ops::Deref;
+
+
+pub struct EventCore<T> {
+    shared_cnt: AtomicUsize,
+    mutex: Mutex<Option<T>>,
+    cond: Condvar,
+}
+
+impl<T> Default for EventCore<T> {
+    fn default() -> EventCore<T> {
+        EventCore {
+            shared_cnt: AtomicUsize::new(0),
+            mutex: Mutex::new(None),
+            cond: Condvar::new(),
+        }
+    }
+}
 
 /// This is a simple mechanism to synchronize between threads with timeout support.
 pub struct Event<T> {
-    inner: Arc<(Mutex<Option<T>>, Condvar)>,
+    inner: Arc<EventCore<T>>,
 }
 
-impl<T> !Sync for Event<T> {}
-
 impl<T> Default for Event<T> {
     fn default() -> Event<T> {
-        Event { inner: Arc::new((Mutex::new(None), Condvar::new())) }
+        Event { inner: Default::default() }
     }
 }
 
+impl<T> Deref for Event<T> {
+    type Target = EventCore<T>;
+
+    fn deref(&self) -> &EventCore<T> {
+        &self.inner
+    }
+}
+
+impl<T> !Sync for Event<T> {}
+
 impl<T> Event<T> {
     pub fn new() -> Event<T> {
         Default::default()
@@ -21,9 +62,9 @@ impl<T> Event<T> {
 
     /// Set this event and wake up all other waiting-set threads.
     pub fn set(&self, t: T) {
-        let mut l = self.inner.0.lock().unwrap();
+        let mut l = self.mutex.lock().unwrap();
         *l = Some(t);
-        self.inner.1.notify_all();
+        self.cond.notify_all();
     }
 
     /// Apply a function to an event.
@@ -31,24 +72,24 @@ impl<T> Event<T> {
     /// If the event is not set yet, None is returned; otherwise
     /// applied result is returned.
     pub fn apply<U, F: Fn(&mut T) -> U>(&self, f: F) -> Option<U> {
-        if self.inner.0.lock().unwrap().is_none() {
+        if self.mutex.lock().unwrap().is_none() {
             return None;
         }
-        let mut l = self.inner.0.lock().unwrap();
+        let mut l = self.mutex.lock().unwrap();
         let res = f(l.as_mut().unwrap());
         Some(res)
     }
 
     /// Query current status without block.
     pub fn is_set(&self) -> bool {
-        self.inner.0.lock().unwrap().is_some()
+        self.mutex.lock().unwrap().is_some()
     }
 
     /// Take the inner value and wait up all other waiting-clear threads.
     pub fn take(&self) -> Option<T> {
-        let mut l = self.inner.0.lock().unwrap();
+        let mut l = self.mutex.lock().unwrap();
         let t = l.take();
-        self.inner.1.notify_all();
+        self.cond.notify_all();
         t
     }
 
@@ -65,20 +106,20 @@ impl<T> Event<T> {
         let start_time = Instant::now();
         let has_timeout = timeout.is_some();
         let timeout = timeout.unwrap_or_else(|| Duration::from_millis(0));
-        let mut l = self.inner.0.lock().unwrap();
+        let mut l = self.mutex.lock().unwrap();
         while l.is_some() != res {
-            if Arc::strong_count(&self.inner) == 1 {
+            if self.shared_cnt.load(Ordering::Relaxed) == 0 {
                 return false;
             }
             if !has_timeout {
-                l = self.inner.1.wait(l).unwrap();
+                l = self.cond.wait(l).unwrap();
                 continue;
             }
             let elapsed = start_time.elapsed();
             if timeout <= elapsed {
                 return false;
             }
-            let (v, timeout_res) = self.inner.1.wait_timeout(l, timeout - elapsed).unwrap();
+            let (v, timeout_res) = self.cond.wait_timeout(l, timeout - elapsed).unwrap();
             if timeout_res.timed_out() {
                 return false;
             }
@@ -98,15 +139,17 @@ impl<T> Event<T> {
 
 impl<T> Clone for Event<T> {
     fn clone(&self) -> Event<T> {
+        self.shared_cnt.fetch_add(1, Ordering::Relaxed);
         Event { inner: self.inner.clone() }
     }
 }
 
 impl<T> Drop for Event<T> {
     fn drop(&mut self) {
-        let f = self.inner.0.lock().unwrap();
+        let f = self.mutex.lock().unwrap();
+        self.shared_cnt.fetch_sub(1, Ordering::Relaxed);
         // notify other clone, so that it won't hung for ever.
-        self.inner.1.notify_all();
+        self.cond.notify_all();
         drop(f);
     }
 }
@@ -164,4 +207,25 @@ mod test {
         assert!(e.wait_timeout(None));
         assert!(!e.wait_clear(None));
     }
+
+    /// In some cases `drop` of Event has been called, but not the inner Arc.
+    /// This may cause dead lock if we count on arc's strong count. 
+    #[test]
+    fn test_dead_lock() {
+        let e1: Event<i64> = Event::new();
+        let e2 = e1.clone();
+        let handle = thread::spawn(move || {
+            let timer = Instant::now();
+            e1.set(2);
+            e1.wait_clear(Some(Duration::from_millis(500)));
+            assert!(timer.elapsed() < Duration::from_millis(500));
+        });
+        e2.wait_timeout(None);
+        // make a clone to simulate the special case.
+        let cloned = e2.inner.clone();
+        drop(e2);
+        thread::sleep(Duration::from_millis(100));
+        drop(cloned);
+        handle.join().unwrap();
+    }
 }
