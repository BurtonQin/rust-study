diff --git a/src/thread.rs b/src/thread.rs
index dae56718..507c57a2 100644
--- a/src/thread.rs
+++ b/src/thread.rs
@@ -113,23 +113,10 @@ use std::fmt;
 use std::io;
 use std::marker::PhantomData;
 use std::mem;
-use std::ops::DerefMut;
 use std::panic;
-use std::rc::Rc;
 use std::sync::{Arc, Mutex};
 use std::thread;
 
-#[doc(hidden)]
-trait FnBox<T> {
-    fn call_box(self: Box<Self>) -> T;
-}
-
-impl<T, F: FnOnce() -> T> FnBox<T> for F {
-    fn call_box(self: Box<Self>) -> T {
-        (*self)()
-    }
-}
-
 /// Like [`std::thread::spawn`], but without lifetime bounds on the closure.
 ///
 /// [`std::thread::spawn`]: https://doc.rust-lang.org/stable/std/thread/fn.spawn.html
@@ -161,47 +148,6 @@ where
     builder.spawn(move || closure.call_box())
 }
 
-pub struct Scope<'env> {
-    /// The list of the thread join jobs.
-    joins: RefCell<Vec<Box<FnBox<thread::Result<()>> + 'env>>>,
-    /// Thread panics invoked so far.
-    panics: Vec<Box<Any + Send + 'static>>,
-    // !Send + !Sync
-    _marker: PhantomData<*const ()>,
-}
-
-struct JoinState<T> {
-    join_handle: thread::JoinHandle<()>,
-    result: ScopedThreadResult<T>,
-}
-
-impl<T> JoinState<T> {
-    fn new(join_handle: thread::JoinHandle<()>, result: ScopedThreadResult<T>) -> JoinState<T> {
-        JoinState {
-            join_handle,
-            result,
-        }
-    }
-
-    fn join(self) -> thread::Result<T> {
-        let result = self.result;
-        self.join_handle
-            .join()
-            .map(|_| result.lock().unwrap().take().unwrap())
-    }
-}
-
-/// A handle to a scoped thread
-pub struct ScopedJoinHandle<'scope, T: 'scope> {
-    // !Send + !Sync
-    inner: Rc<RefCell<Option<JoinState<T>>>>,
-    thread: thread::Thread,
-    _marker: PhantomData<&'scope T>,
-}
-
-unsafe impl<'scope, T> Send for ScopedJoinHandle<'scope, T> {}
-unsafe impl<'scope, T> Sync for ScopedJoinHandle<'scope, T> {}
-
 /// Creates a new `Scope` for [*scoped thread spawning*](struct.Scope.html#method.spawn).
 ///
 /// No matter what happens, before the `Scope` is dropped, it is guaranteed that all the unjoined
@@ -225,58 +171,36 @@ pub fn scope<'env, F, R>(f: F) -> thread::Result<R>
 where
     F: FnOnce(&Scope<'env>) -> R,
 {
-    let mut scope = Scope {
+    let scope = Scope {
         joins: RefCell::new(Vec::new()),
-        panics: Vec::new(),
         _marker: PhantomData,
     };
 
-    // Executes the scoped function. Panic will be catched as `Err`.
+    // Execute the scoped function, but catch any panics.
     let result = panic::catch_unwind(panic::AssertUnwindSafe(|| f(&scope)));
+    // Join all remaining spawned threads.
+    let mut panics = scope.join_all();
+
+    if panics.is_empty() {
+        result.map_err(|res| Box::new(vec![res]) as _)
+    } else {
+        if let Err(err) = result {
+            panics.reserve(1);
+            panics.insert(0, err);
+        }
 
-    // Joins all the threads.
-    scope.join_all();
-    let panic = scope.panics.pop();
-
-    // If any of the threads panicked, returns the panic's payload.
-    if let Some(payload) = panic {
-        return Err(payload);
-    }
-
-    // Returns the result of the scoped function.
-    result
-}
-
-impl<'env> fmt::Debug for Scope<'env> {
-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
-        write!(f, "Scope {{ ... }}")
+        Err(Box::new(panics))
     }
 }
 
-impl<'scope, T> fmt::Debug for ScopedJoinHandle<'scope, T> {
-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
-        write!(f, "ScopedJoinHandle {{ ... }}")
-    }
+pub struct Scope<'env> {
+    /// The list of the thread join jobs.
+    joins: RefCell<Vec<Box<FnBox<thread::Result<()>> + 'env>>>,
+    // !Send + !Sync
+    _marker: PhantomData<*const ()>,
 }
 
 impl<'env> Scope<'env> {
-    // This method is carefully written in a transactional style, so that it can be called directly
-    // and, if any thread join panics, can be resumed in the unwinding this causes. By initially
-    // running the method outside of any destructor, we avoid any leakage problems due to
-    // @rust-lang/rust#14875.
-    //
-    // FIXME(jeehoonkang): @rust-lang/rust#14875 is fixed, so maybe we can remove the above comment.
-    // But I'd like to write tests to check it before removing the comment.
-    fn join_all(&mut self) {
-        let mut joins = self.joins.borrow_mut();
-        for join in joins.drain(..) {
-            let result = join.call_box();
-            if let Err(payload) = result {
-                self.panics.push(payload);
-            }
-        }
-    }
-
     /// Create a scoped thread.
     ///
     /// `spawn` is similar to the [`spawn`] function in Rust's standard library. The difference is
@@ -302,6 +226,22 @@ impl<'env> Scope<'env> {
             builder: thread::Builder::new(),
         }
     }
+
+    /// Join all remaining threads and return all potential error payloads
+    fn join_all(self) -> Vec<Box<Any + Send + 'static>> {
+        self
+            .joins
+            .into_inner()
+            .into_iter()
+            .filter_map(|join| join.call_box().err())
+            .collect()
+    }
+}
+
+impl<'env> fmt::Debug for Scope<'env> {
+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
+        write!(f, "Scope {{ ... }}")
+    }
 }
 
 /// Scoped thread configuration. Provides detailed control over the properties and behavior of new
@@ -311,7 +251,7 @@ pub struct ScopedThreadBuilder<'scope, 'env: 'scope> {
     builder: thread::Builder,
 }
 
-impl<'scope, 'env: 'scope> ScopedThreadBuilder<'scope, 'env> {
+impl<'scope, 'env> ScopedThreadBuilder<'scope, 'env> {
     /// Names the thread-to-be. Currently the name is used for identification only in panic
     /// messages.
     pub fn name(mut self, name: String) -> ScopedThreadBuilder<'scope, 'env> {
@@ -342,13 +282,17 @@ impl<'scope, 'env: 'scope> ScopedThreadBuilder<'scope, 'env> {
         }?;
 
         let thread = join_handle.thread().clone();
-
         let join_state = JoinState::<T>::new(join_handle, result);
-        let deferred_handle = Rc::new(RefCell::new(Some(join_state)));
-        let my_handle = deferred_handle.clone();
 
+        let handle = ScopedJoinHandle {
+            inner: Arc::new(Mutex::new(Some(join_state))),
+            thread,
+            _marker: PhantomData,
+        };
+
+        let deferred_handle = Arc::clone(&handle.inner);
         self.scope.joins.borrow_mut().push(Box::new(move || {
-            let state = deferred_handle.borrow_mut().deref_mut().take();
+            let state = deferred_handle.lock().unwrap().take();
             if let Some(state) = state {
                 state.join().map(|_| ())
             } else {
@@ -356,14 +300,20 @@ impl<'scope, 'env: 'scope> ScopedThreadBuilder<'scope, 'env> {
             }
         }));
 
-        Ok(ScopedJoinHandle {
-            inner: my_handle,
-            thread: thread,
-            _marker: PhantomData,
-        })
+        Ok(handle)
     }
 }
 
+unsafe impl<'scope, T> Send for ScopedJoinHandle<'scope, T> {}
+unsafe impl<'scope, T> Sync for ScopedJoinHandle<'scope, T> {}
+
+/// A handle to a scoped thread
+pub struct ScopedJoinHandle<'scope, T: 'scope> {
+    inner: Arc<Mutex<Option<JoinState<T>>>>,
+    thread: thread::Thread,
+    _marker: PhantomData<&'scope T>,
+}
+
 impl<'scope, T> ScopedJoinHandle<'scope, T> {
     /// Waits for the associated thread to finish.
     ///
@@ -377,7 +327,7 @@ impl<'scope, T> ScopedJoinHandle<'scope, T> {
     /// This function may panic on some platforms if a thread attempts to join itself or otherwise
     /// may create a deadlock with joining threads.
     pub fn join(self) -> thread::Result<T> {
-        let state = self.inner.borrow_mut().deref_mut().take();
+        let state = self.inner.lock().unwrap().take();
         state.unwrap().join()
     }
 
@@ -389,19 +339,45 @@ impl<'scope, T> ScopedJoinHandle<'scope, T> {
     }
 }
 
-impl<'env> Drop for Scope<'env> {
-    fn drop(&mut self) {
-        // Note that `self.joins` can be non-empty when the code inside a `scope()` panics and
-        // `drop()` is called in unwinding. Even if it's the case, we will join the unjoined
-        // threads.
-        //
-        // We ignore panics from any threads because we're in course of unwinding anyway.
-        self.join_all();
+impl<'scope, T> fmt::Debug for ScopedJoinHandle<'scope, T> {
+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
+        write!(f, "ScopedJoinHandle {{ ... }}")
     }
 }
 
 type ScopedThreadResult<T> = Arc<Mutex<Option<T>>>;
 
+struct JoinState<T> {
+    join_handle: thread::JoinHandle<()>,
+    result: ScopedThreadResult<T>,
+}
+
+impl<T> JoinState<T> {
+    fn new(join_handle: thread::JoinHandle<()>, result: ScopedThreadResult<T>) -> JoinState<T> {
+        JoinState {
+            join_handle,
+            result,
+        }
+    }
+
+    fn join(self) -> thread::Result<T> {
+        let result = self.result;
+        self.join_handle
+            .join()
+            .map(|_| result.lock().unwrap().take().unwrap())
+    }
+}
+
+trait FnBox<T> {
+    fn call_box(self: Box<Self>) -> T;
+}
+
+impl<T, F: FnOnce() -> T> FnBox<T> for F {
+    fn call_box(self: Box<Self>) -> T {
+        (*self)()
+    }
+}
+
 #[cfg(test)]
 mod tests {
     use super::*;
@@ -488,10 +464,42 @@ mod tests {
     fn panic_twice() {
         let result = scope(|scope| {
             scope.spawn(|| {
-                panic!();
+                panic!("thread");
             });
-            panic!();
+            panic!("scope");
         });
-        assert!(result.is_err());
+
+        let err = result.unwrap_err();
+        let vec = err.downcast_ref::<Vec<Box<Any + Send + 'static>>>().unwrap();
+        assert_eq!(2, vec.len());
+
+        let first = vec[0].downcast_ref::<&str>().unwrap();
+        let second = vec[1].downcast_ref::<&str>().unwrap();
+        assert_eq!("scope", *first);
+        assert_eq!("thread", *second)
+    }
+
+    #[test]
+    fn panic_many() {
+        let result = scope(|scope| {
+            scope.spawn(|| panic!("deliberate panic #1"));
+            scope.spawn(|| panic!("deliberate panic #2"));
+            scope.spawn(|| panic!("deliberate panic #3"));
+        });
+
+        let err = result.unwrap_err();
+        let vec = err
+            .downcast_ref::<Vec<Box<Any + Send + 'static>>>()
+            .unwrap();
+        assert_eq!(3, vec.len());
+
+        for panic in vec.iter() {
+            let panic = panic.downcast_ref::<&str>().unwrap();
+            assert!(
+                *panic == "deliberate panic #1"
+                    || *panic == "deliberate panic #2"
+                    || *panic == "deliberate panic #3"
+            );
+        }
     }
 }
