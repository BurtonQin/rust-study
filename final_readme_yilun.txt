-----------------------------------------------------------------
Section 2.

Figure 1. can be generated by running the script `section-2-background-and-related-work/Figure-1/plot_Figure_1.sh`.
The raw data is in `section-2-background-and-related-work/Figure-1/data_rust_history.tab”.
The explanation of raw data format is in `section-2-background-and-related-work/Figure-1/README.md`

Figure 2. can be generated by running the script `section-2-background-and-related-work/Figure-2/plot_Figure_2.sh`. 
The raw data is placed under `section-2-background-and-related-work/Figure-2/raw_data”. The explanation of raw data 
format is in `section-2-background-and-related-work/Figure-2/README.md`

Lines 196-197. The numbers in “Among the 170 bugs, 145 of them were fixed after 2016” can be got by referring 
`artifact.xlsx`, section-5-memory tab: column D, section-6.1-blocking: column E, section-6.2-non-blocking: column E.


-----------------------------------------------------------------
Section 5.

All the appeared numbers in this section can be derived from `artifact.xlsx`, tab `section-5-memory`.

********************************************************
Section 5.1

Table 2. can be got by referring columns F-L. 

Line 680-681. The numbers in “18 out of 21 bugs in this category follow the same pattern, ...” can be got by referring columns H and N.

Lines 683-684. The number in “For 11 bugs, the effect is inside an interior unsafe function” can be got by referring column AA. 

Line 684-685. The number in “Six interior unsafe functions contain condition check to avoid buffer overflow” can be got by referring column AB.

Line 687-689. The number in “For three interior functions, their input …” can be got by referring column AC.

Line 691-692. “All bugs in this category are caused by dereferencing a null pointer in unsafe code” can be got by referring columns G and O.

Line 692-693. The number in “In five of them, null pointer dereferencing happens in an interior unsafe function” can be got by referring column AE.

Line 696-697. The number in “All the seven bugs in this category are unsafe->safe” can be got from column P and I.

Line 697-698. The number in “Four of them use unsafe code to create an uninitialized buffer...” can be got by referring column AG.

Line 699-700. “The rest initialize buffers incorrectly” can be got by referring column AH.

Line 702-703. The numbers in “Out of the ten invalid-free bugs, five share the same (unsafe) code pattern.” can be got from column R.

Line 728-729. The numbers in “11 out of 14 use-after-free bugs happen because an object is dropped...” can be got by referring column AL.

Line 743-744. The number in “There is one use-after-free bug whose cause and effect are both in safe code” can be got by referring column AM.

Line 746-747. The number in “The last two bugs happen in a self-implemented vector” can be got by referring column AN.

Line 751-753. The numbers in “There are six double-free bugs. Other than two bugs that are safe->unsafe and similar to traditional double-free bugs,
the rest are all unsafe->safe” can be derived from columns AP-AQ.

********************************************************
Section 5.2

Line 781-783. The number “30 bugs were fixed by capturing the conditions that lead to dangerous operations and skipping the dangerous operations
under these conditions” can be got from column V.

Line 785-787. The numbers in “25 of these bugs were fixed by skipping unsafe code, two were fixed by skipping interior unsafe code, 
and three skipped safe code” can be got by referring columns AS-AU

Line 788-790. The number “23 bugs were fixed by changing the lifetime of an object ...” can be got from column W.

Line 796. The number “Nine bugs were fixed by modifying operands of unsafe operations.” can be got from column X.

Line 801-802. The number in “The remaining eight bugs used various fixed strategies... ” can be got from column Y.

-----------------------------------------------------------------
Section 7

********************************************************
Section 7.1

Line 1228-1229. “In total, our detector found four previously unknown bugs in our studied applications”. The number “four” bugs can be derived
by running script `section-7-bug-detection/section-7.1-detecting-memory-bugs/run_uaf_detector.sh`. The duplicated reports in the same MIR file 
should be counted as the same bug. (See. `section-7-bug-detection/section-7.1-detecting-memory-bugs/use-after-free-detector/README.md`)

