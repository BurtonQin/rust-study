diff --git a/src/mount/fuse.rs b/src/mount/fuse.rs
index 4b03fed..d157a52 100644
--- a/src/mount/fuse.rs
+++ b/src/mount/fuse.rs
@@ -65,9 +65,22 @@ fn node_attr(node: &(u64, Node)) -> FileAttr {
     }
 }

+macro_rules! try_name {
+    ($name: expr, $reply: expr) => {{
+        match $name.to_str() {
+            Some(_name) => _name,
+            None => {
+                $reply.error(syscall::EINVAL);
+                return;
+            }
+        }
+    }};
+}
+
 impl<D: Disk> Filesystem for Fuse<D> {
     fn lookup(&mut self, _req: &Request, parent_block: u64, name: &OsStr, reply: ReplyEntry) {
-        match self.fs.find_node(name.to_str().unwrap(), parent_block) {
+        let name_str = try_name!(name, reply);
+        match self.fs.find_node(name_str, parent_block) {
             Ok(node) => {
                 reply.entry(&TTL, &node_attr(&node), 0);
             },
@@ -249,7 +262,8 @@ impl<D: Disk> Filesystem for Fuse<D> {

     fn create(&mut self, _req: &Request, parent_block: u64, name: &OsStr, mode: u32, flags: u32, reply: ReplyCreate) {
         let ctime = SystemTime::now().duration_since(UNIX_EPOCH).unwrap();
-        match self.fs.create_node(Node::MODE_FILE | (mode as u16 & Node::MODE_PERM), name.to_str().unwrap(), parent_block, ctime.as_secs(), ctime.subsec_nanos()) {
+        let name_str = try_name!(name, reply);
+        match self.fs.create_node(Node::MODE_FILE | (mode as u16 & Node::MODE_PERM), name_str, parent_block, ctime.as_secs(), ctime.subsec_nanos()) {
             Ok(node) => {
                 // println!("Create {:?}:{:o}:{:o}", node.1.name(), node.1.mode, mode);
                 reply.created(&TTL, &node_attr(&node), 0, 0, flags);
@@ -262,7 +276,8 @@ impl<D: Disk> Filesystem for Fuse<D> {

     fn mkdir(&mut self, _req: &Request, parent_block: u64, name: &OsStr, mode: u32, reply: ReplyEntry) {
         let ctime = SystemTime::now().duration_since(UNIX_EPOCH).unwrap();
-        match self.fs.create_node(Node::MODE_DIR | (mode as u16 & Node::MODE_PERM), name.to_str().unwrap(), parent_block, ctime.as_secs(), ctime.subsec_nanos()) {
+        let name_str = try_name!(name, reply);
+        match self.fs.create_node(Node::MODE_DIR | (mode as u16 & Node::MODE_PERM), name_str, parent_block, ctime.as_secs(), ctime.subsec_nanos()) {
             Ok(node) => {
                 // println!("Mkdir {:?}:{:o}:{:o}", node.1.name(), node.1.mode, mode);
                 reply.entry(&TTL, &node_attr(&node), 0);
@@ -274,7 +289,8 @@ impl<D: Disk> Filesystem for Fuse<D> {
     }

     fn rmdir(&mut self, _req: &Request, parent_block: u64, name: &OsStr, reply: ReplyEmpty) {
-        match self.fs.remove_node(Node::MODE_DIR, name.to_str().unwrap(), parent_block) {
+        let name_str = try_name!(name, reply);
+        match self.fs.remove_node(Node::MODE_DIR, name_str, parent_block) {
             Ok(()) => {
                 reply.ok();
             },
@@ -285,7 +301,8 @@ impl<D: Disk> Filesystem for Fuse<D> {
     }

     fn unlink(&mut self, _req: &Request, parent_block: u64, name: &OsStr, reply: ReplyEmpty) {
-        match self.fs.remove_node(Node::MODE_FILE, name.to_str().unwrap(), parent_block) {
+        let name_str = try_name!(name, reply);
+        match self.fs.remove_node(Node::MODE_FILE, name_str, parent_block) {
             Ok(()) => {
                 reply.ok();
             },
@@ -312,7 +329,8 @@ impl<D: Disk> Filesystem for Fuse<D> {

     fn symlink(&mut self, _req: &Request, parent_block: u64, name: &OsStr, link: &Path, reply: ReplyEntry) {
         let ctime = SystemTime::now().duration_since(UNIX_EPOCH).unwrap();
-        match self.fs.create_node(Node::MODE_SYMLINK | 0o777, name.to_str().unwrap(), parent_block, ctime.as_secs(), ctime.subsec_nanos()) {
+        let name_str = try_name!(name, reply);
+        match self.fs.create_node(Node::MODE_SYMLINK | 0o777, name_str, parent_block, ctime.as_secs(), ctime.subsec_nanos()) {
             Ok(node) => {
                 let mtime = SystemTime::now().duration_since(UNIX_EPOCH).unwrap();
                 match self.fs.write_node(node.0, 0, link.as_os_str().as_bytes(), mtime.as_secs(), mtime.subsec_nanos()) {
